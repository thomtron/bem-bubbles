#ifndef QUADRATURE_HPP
#define QUADRATURE_HPP

#include "../basic/Bem.hpp"

#include <vector>

namespace Bem {


struct quadrature_1d {
    real x, weight;
    quadrature_1d(real x,real weight)
        :x(x),weight(weight) {}
};

// Gaussian quadrature rules taken from: https://pomax.github.io/bezierinfo/legendre-gauss.html
const std::vector<quadrature_1d> gauss_3 = {
    quadrature_1d(0.5*(1.0+0.0000000000000000),0.5*0.8888888888888888),
    quadrature_1d(0.5*(1.0-0.7745966692414834),0.5*0.5555555555555556),
    quadrature_1d(0.5*(1.0+0.7745966692414834),0.5*0.5555555555555556)
};

const std::vector<quadrature_1d> gauss_7 = {
    quadrature_1d(0.5*(1.0+0.0000000000000000),0.5*0.4179591836734694),
    quadrature_1d(0.5*(1.0+0.4058451513773972),0.5*0.3818300505051189),
    quadrature_1d(0.5*(1.0-0.4058451513773972),0.5*0.3818300505051189),
    quadrature_1d(0.5*(1.0-0.7415311855993945),0.5*0.2797053914892766),
    quadrature_1d(0.5*(1.0+0.7415311855993945),0.5*0.2797053914892766),
    quadrature_1d(0.5*(1.0-0.9491079123427585),0.5*0.1294849661688697),
    quadrature_1d(0.5*(1.0+0.9491079123427585),0.5*0.1294849661688697)
};

 	

const std::vector<quadrature_1d> gauss_12 = {
    quadrature_1d(0.5*(1.0-0.1252334085114689),0.5*0.2491470458134028),
    quadrature_1d(0.5*(1.0+0.1252334085114689),0.5*0.2491470458134028),
    quadrature_1d(0.5*(1.0-0.3678314989981802),0.5*0.2334925365383548),
    quadrature_1d(0.5*(1.0+0.3678314989981802),0.5*0.2334925365383548),
    quadrature_1d(0.5*(1.0-0.5873179542866175),0.5*0.2031674267230659),
    quadrature_1d(0.5*(1.0+0.5873179542866175),0.5*0.2031674267230659),
    quadrature_1d(0.5*(1.0-0.7699026741943047),0.5*0.1600783285433462),
    quadrature_1d(0.5*(1.0+0.7699026741943047),0.5*0.1600783285433462),
    quadrature_1d(0.5*(1.0-0.9041172563704749),0.5*0.1069393259953184),
    quadrature_1d(0.5*(1.0+0.9041172563704749),0.5*0.1069393259953184),
    quadrature_1d(0.5*(1.0-0.9815606342467192),0.5*0.0471753363865118),
    quadrature_1d(0.5*(1.0+0.9815606342467192),0.5*0.0471753363865118)
};



const std::vector<quadrature_1d> quadrature_x = {
    quadrature_1d(0.0,0.0909090909091),
    quadrature_1d(0.1,0.0909090909091),
    quadrature_1d(0.2,0.0909090909091),
    quadrature_1d(0.3,0.0909090909091),
    quadrature_1d(0.4,0.0909090909091),
    quadrature_1d(0.5,0.0909090909091),
    quadrature_1d(0.6,0.0909090909091),
    quadrature_1d(0.7,0.0909090909091),
    quadrature_1d(0.8,0.0909090909091),
    quadrature_1d(0.9,0.0909090909091),
    quadrature_1d(1.0,0.0909090909091)
};

struct quadrature_2d {
    real x;
    real y;
    real weight;
    quadrature_2d(real x,real y,real weight)
        :x(x),y(y),weight(weight) {}
};

// from: https://people.sc.fsu.edu/~jburkardt/datasets/quadrature_rules_tri/quadrature_rules_tri.html
// note: have to divide weights with 2

using QuadratureList_2d = std::vector<quadrature_2d>;

const QuadratureList_2d quadrature_1 = { // prec. 1
    quadrature_2d(1.0/3.0,1.0/3.0,0.5)
};

const QuadratureList_2d quadrature_3 = { // prec. 2
    quadrature_2d(0.66666666666666666667,  0.16666666666666666667 , 1.0/6.0),
    quadrature_2d(0.16666666666666666667,  0.66666666666666666667 , 1.0/6.0),
    quadrature_2d(0.16666666666666666667,  0.16666666666666666667 , 1.0/6.0)
};

const QuadratureList_2d quadrature_4 = { // prec. 3
    quadrature_2d(1.0/3.0, 1.0/3.0, -0.56250000000000000000*0.5),
    quadrature_2d(0.6,     0.2,      0.52083333333333333333*0.5),
    quadrature_2d(0.2,     0.6,      0.52083333333333333333*0.5),
    quadrature_2d(0.2,     0.2,      0.52083333333333333333*0.5)
};

const QuadratureList_2d quadrature_7 = { // prec. 5
    quadrature_2d(0.33333333333333333,  0.33333333333333333, 0.22500000000000000*0.5),
    quadrature_2d(0.79742698535308720,  0.10128650732345633, 0.12593918054482717*0.5),
    quadrature_2d(0.10128650732345633,  0.79742698535308720, 0.12593918054482717*0.5),
    quadrature_2d(0.10128650732345633,  0.10128650732345633, 0.12593918054482717*0.5),
    quadrature_2d(0.05971587178976981,  0.47014206410511505, 0.13239415278850616*0.5),
    quadrature_2d(0.47014206410511505,  0.05971587178976981, 0.13239415278850616*0.5),
    quadrature_2d(0.47014206410511505,  0.47014206410511505, 0.13239415278850616*0.5)
};

const QuadratureList_2d quadrature_9 = { // prec. 6
    quadrature_2d(0.124949503233232,  0.437525248383384, 0.205950504760887*0.5),
    quadrature_2d(0.437525248383384,  0.124949503233232, 0.205950504760887*0.5),
    quadrature_2d(0.437525248383384,  0.437525248383384, 0.205950504760887*0.5),
    quadrature_2d(0.797112651860071,  0.165409927389841, 0.063691414286223*0.5),
    quadrature_2d(0.797112651860071,  0.037477420750088, 0.063691414286223*0.5),
    quadrature_2d(0.165409927389841,  0.797112651860071, 0.063691414286223*0.5),
    quadrature_2d(0.165409927389841,  0.037477420750088, 0.063691414286223*0.5),
    quadrature_2d(0.037477420750088,  0.797112651860071, 0.063691414286223*0.5),
    quadrature_2d(0.037477420750088,  0.165409927389841, 0.063691414286223*0.5)
};

const QuadratureList_2d quadrature_13 = { // prec. 7
    quadrature_2d(0.333333333333333,  0.333333333333333, -0.149570044467670*0.5),
    quadrature_2d(0.479308067841923,  0.260345966079038, 0.175615257433204*0.5),
    quadrature_2d(0.260345966079038,  0.479308067841923, 0.175615257433204*0.5),
    quadrature_2d(0.260345966079038,  0.260345966079038, 0.175615257433204*0.5),
    quadrature_2d(0.869739794195568,  0.065130102902216, 0.053347235608839*0.5),
    quadrature_2d(0.065130102902216,  0.869739794195568, 0.053347235608839*0.5),
    quadrature_2d(0.065130102902216,  0.065130102902216, 0.053347235608839*0.5),
    quadrature_2d(0.638444188569809,  0.312865496004875, 0.077113760890257*0.5),
    quadrature_2d(0.638444188569809,  0.048690315425316, 0.077113760890257*0.5),
    quadrature_2d(0.312865496004875,  0.638444188569809, 0.077113760890257*0.5),
    quadrature_2d(0.312865496004875,  0.048690315425316, 0.077113760890257*0.5),
    quadrature_2d(0.048690315425316,  0.638444188569809, 0.077113760890257*0.5),
    quadrature_2d(0.048690315425316,  0.312865496004875, 0.077113760890257*0.5)
};

const QuadratureList_2d quadrature_19 = { // prec. 9
    quadrature_2d(0.33333333333333331   ,  0.33333333333333331   , 9.71357962827961025e-2*0.5),
    quadrature_2d(2.06349616025259287e-2,  0.48968251919873701   , 3.13347002271398278e-2*0.5),
    quadrature_2d(0.48968251919873701   ,  2.06349616025259287e-2, 3.13347002271398278e-2*0.5),
    quadrature_2d(0.48968251919873701   ,  0.48968251919873701   , 3.13347002271398278e-2*0.5),
    quadrature_2d(0.12582081701412900   ,  0.43708959149293553   , 7.78275410047754301e-2*0.5),
    quadrature_2d(0.43708959149293553   ,  0.12582081701412900   , 7.78275410047754301e-2*0.5),
    quadrature_2d(0.43708959149293553   ,  0.43708959149293553   , 7.78275410047754301e-2*0.5),
    quadrature_2d(0.62359292876193562   ,  0.18820353561903219   , 7.96477389272090969e-2*0.5),
    quadrature_2d(0.18820353561903219   ,  0.62359292876193562   , 7.96477389272090969e-2*0.5),
    quadrature_2d(0.18820353561903219   ,  0.18820353561903219   , 7.96477389272090969e-2*0.5),
    quadrature_2d(0.91054097321109406   ,  4.47295133944529688e-2, 2.55776756586981006e-2*0.5),
    quadrature_2d(4.47295133944529688e-2,  0.91054097321109406   , 2.55776756586981006e-2*0.5),
    quadrature_2d(4.47295133944529688e-2,  4.47295133944529688e-2, 2.55776756586981006e-2*0.5),
    quadrature_2d(0.74119859878449801   ,  3.68384120547362581e-2, 4.32835393772893970e-2*0.5),
    quadrature_2d(0.74119859878449801   ,  0.22196298916076573   , 4.32835393772893970e-2*0.5),
    quadrature_2d(3.68384120547362581e-2,  0.74119859878449801   , 4.32835393772893970e-2*0.5),
    quadrature_2d(3.68384120547362581e-2,  0.22196298916076573   , 4.32835393772893970e-2*0.5),
    quadrature_2d(0.22196298916076573   ,  0.74119859878449801   , 4.32835393772893970e-2*0.5),
    quadrature_2d(0.22196298916076573   ,  3.68384120547362581e-2, 4.32835393772893970e-2*0.5)
};


const std::vector<QuadratureList_2d const *> triangle_quadratures = {
    &quadrature_1,  // 0
    &quadrature_3,  // 1
    &quadrature_4,  // 2
    &quadrature_7,  // 3
    &quadrature_9,  // 4
    &quadrature_13, // 5
    &quadrature_19  // 6
};



/*
const QuadratureList_2d quadrature_7 = { // prec. 4
    quadrature_2d(0.10128650732345625962,  0.10128650732345649554 , 0.062969590272413583643),
    quadrature_2d(0.7974269853530872032,   0.10128650732345624574 , 0.062969590272413583643),
    quadrature_2d(0.10128650732345650942,  0.79742698535308742525 , 0.062969590272413583643),
    quadrature_2d(0.47014206410511505396,  0.059715871789769885136, 0.066197076394253095977),
    quadrature_2d(0.47014206410511505396,  0.47014206410511510947 , 0.066197076394253095977),
    quadrature_2d(0.059715871789769781053, 0.47014206410511527601 , 0.066197076394253095977),
    quadrature_2d(0.33333333333333325932,  0.33333333333333342585 , 0.11250000000000001665 )
};

const QuadratureList_2d quadrature_19 = {
    quadrature_2d(0.48968251919873762024,  0.020634961602524783814, 0.015667350113569539216),
    quadrature_2d(0.48968251919873762024,  0.48968251919873773126 , 0.015667350113569539216),
    quadrature_2d(0.020634961602524704016, 0.48968251919873784228 , 0.015667350113569539216),
    quadrature_2d(0.33333333333333325932,  0.33333333333333342585 , 0.048567898141399425127),
    quadrature_2d(0.18820353561903263584,  0.18820353561903288564 , 0.039823869463605138241),
    quadrature_2d(0.62359292876193439525,  0.18820353561903271911 , 0.039823869463605138241),
    quadrature_2d(0.1882035356190329134,   0.6235929287619346173  , 0.039823869463605138241),
    quadrature_2d(0.22196298916076570573,  0.036838412054736313639, 0.021641769688644688086),
    quadrature_2d(0.74119859878449800838,  0.22196298916076573349 , 0.021641769688644688086),
    quadrature_2d(0.03683841205473636915,  0.74119859878449811941 , 0.021641769688644688086),
    quadrature_2d(0.74119859878449800838,  0.036838412054736313639, 0.021641769688644688086),
    quadrature_2d(0.221962989160765789,    0.74119859878449811941 , 0.021641769688644688086),
    quadrature_2d(0.036838412054736133228, 0.22196298916076598329 , 0.021641769688644688086),
    quadrature_2d(0.43708959149293657998,  0.12582081701412678454 , 0.038913770502387139139),
    quadrature_2d(0.43708959149293657998,  0.437089591492936691   , 0.038913770502387139139),
    quadrature_2d(0.12582081701412667352,  0.43708959149293680202 , 0.038913770502387139139),
    quadrature_2d(0.044729513394452566355, 0.044729513394452878605, 0.012788837829349017361),
    quadrature_2d(0.91054097321109450647,  0.04472951339445253166 , 0.012788837829349017361),
    quadrature_2d(0.044729513394453024322, 0.91054097321109461749 , 0.012788837829349017361)
};
*/

} // namespace Bem

#endif // QUADRATURE_HPP